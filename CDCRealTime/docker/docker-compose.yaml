version: '3'
networks:
  apache-networks:
    driver: bridge

services:
  zookeeper1:
    image: wurstmeister/zookeeper
    container_name: zookeeper1
    restart: always
    ports:
      - "9001:2181"
    volumes:
      - "./zookeeper/zookeeper1/data:/data"
      - "./zookeeper/zookeeper1/datalog:/datalog"
      - "./zookeeper/zookeeper1/logs:/logs"
      - "./zookeeper/zookeeper1/conf:/conf"
    environment:
      # 用于标识Zookeeper集群中每个服务器的唯一ID
      # ZOO_MY_ID 属性在Zookeeper中的作用视为每个服务器分配一个唯一的ID，用于确定服务器在集群中的角色和行为
      ZOO_MY_ID: 1
      # 用于指定Zookeeper集群中的服务器列表，用于建立多个服务器之间的通信和协作
      ZOO_SERVERS: server.1=zookeeper1:2888:3888 server.2=zookeeper2:2888:3888
    networks:
      - apache-networks

  zookeeper2:
    image: wurstmeister/zookeeper
    container_name: zookeeper2
    restart: always
    ports:
      - "9002:2181"
    volumes:
      - "./zookeeper/zookeeper2/data:/data"
      - "./zookeeper/zookeeper2/datalog:/datalog"
      - "./zookeeper/zookeeper2/logs:/logs"
      - "./zookeeper/zookeeper2/conf:/conf"
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zookeeper1:2888:3888 server.2=zookeeper2:2888:3888
    networks:
      - apache-networks

  kafka1:
    image: wurstmeister/kafka
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 192.168.0.123
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.0.123:9092
      KAFKA_ZOOKEEPER_CONNECT: "192.168.0.123:9001,192.168.0.123:9002"
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - apache-networks
    depends_on:
      - zookeeper1
      - zookeeper2

  kafka2:
    image: wurstmeister/kafka
    container_name: kafka2
    ports:
      - "9093:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 192.168.0.123
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.0.123:9093
      KAFKA_ZOOKEEPER_CONNECT: "192.168.0.123:9001,192.168.0.123:9002"
      KAFKA_ADVERTISED_PORT: 9093
      KAFKA_BROKER_ID: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - apache-networks
    depends_on:
      - zookeeper1
      - zookeeper2

  kafka3:
    image: wurstmeister/kafka
    container_name: kafka3
    ports:
      - "9094:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 192.168.0.123
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.0.123:9094
      KAFKA_ZOOKEEPER_CONNECT: "192.168.0.123:9001,192.168.0.123:9002"
      KAFKA_ADVERTISED_PORT: 9094
      KAFKA_BROKER_ID: 3
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - apache-networks
    depends_on:
      - zookeeper1
      - zookeeper2

  kafka-map:
    image: dushixiang/kafka-map
    container_name: kafka-map
    restart: always
    ports:
      - "8080:8080"
    volumes:
      - "./kafka-map/data:/usr/local/kafka-map/data"
    environment:
      - DEFAULT_USERNAME=admin
      - DEFAULT_PASSWORD=admin
    networks:
      - apache-networks
    depends_on:
      - zookeeper1
      - zookeeper2
      - kafka1
      - kafka2
      - kafka3

  clickhouse:
    image: yandex/clickhouse-server
    container_name: clickhouse-server
    ports:
      - "8123:8123"
      - "9000:9000"
      - "9004:9004"
    volumes:
      - "./clickhouse/db:/var/lib/clickhouse"
#      - "./clickhouse/config.xml:/etc/clickhouse-server/config.xml"
#      - "./clickhouse/users.xml:/etc/clickhouse-server/users.xml"
#      - "./clickhouse/data:/var/lib/clickhouse"
#      - "./clickhouse/log/clickhouse-server.log:/var/log/clickhouse-server/clickhouse-server.log"
#      - "./clickhouse/log/clickhouse-server.err.log:/var/log/clickhouse-server/clickhouse-server.err.log"
    networks:
      - apache-networks


# 用于创建一个使用 tmpfs 文件系统的本地卷，用于在容器中存储临时数据，例如临时文件、缓存等。
# 由于 tmpfs 是基于内存的文件系统，适合存储临时数据，读写舒服较快，切数据在容器停止后会被清除，不会留下永久的存储。
volumes:
  shared_tempfs:
    driver: local
    driver_opts:
      type: "tmpfs"
      device: "tmpfs"